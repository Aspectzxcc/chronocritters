enum CritterType {
    FIRE
    WATER
    GRASS
    ELECTRIC
    METAL
    TOXIC
    KINETIC
}

enum EffectType {
    DAMAGE
    DAMAGE_OVER_TIME
    SKIP_TURN
    BUFF
    DEBUFF
}

type Ability {
    id: ID
    name: String
    effects: [Effect]
}

interface Effect {
  id: ID!
  type: EffectType!
}

type DamageEffect implements Effect {
  id: ID!
  type: EffectType!
  power: Int!
}

type DamageOverTimeEffect implements Effect {
  id: ID!
  type: EffectType!
  damagePerTurn: Int!
  duration: Int!
}

union EffectUnion = DamageEffect | DamageOverTimeEffect

type BaseStats {
    health: Int
    attack: Int
    defense: Int
}

type Critter {
    id: ID
    name: String
    type: CritterType
    baseStats: BaseStats
    abilities: [Ability]
}

type PlayerStats {
    wins: Int
    losses: Int
}

type Player {
    id: ID
    username: String
    password: String
    stats: PlayerStats
    roster: [Critter]
}

type User {
    id: ID!
    username: String!
}

type LoginResponse {
    user: User!
    token: String!
}

type Query {
    getPlayer(id: ID!): Player
}

type Mutation {
    register(username: String!, password: String!): LoginResponse
    login(username: String!, password: String!): LoginResponse
}