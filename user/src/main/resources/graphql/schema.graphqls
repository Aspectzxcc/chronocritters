enum CritterType {
    FIRE
    WATER
    GRASS
    ELECTRIC
    METAL
    TOXIC
    KINETIC
    UNKNOWN
}

union EffectUnion = DamageEffect | DamageOverTimeEffect | SkipTurnEffect

type SkipTurnEffect implements Effect {
  id: ID!
  description: String!
  duration: Int!
}

type DamageOverTimeEffect implements Effect {
  id: ID!
  description: String!
  damagePerTurn: Int!
  duration: Int!
}

type DamageEffect implements Effect {
  id: ID!
  description: String!
  damage: Int!
}

interface Effect {
  id: ID!
  description: String!
}

type Ability {
    id: ID
    name: String
    description: String
    effects: [EffectUnion]
}

type BaseStats {
    level: Int
    experience: Int
    expToNextLevel: Int
    health: Int
    attack: Int
    defense: Int
}

type Critter {
    id: ID
    name: String
    description: String
    type: CritterType
    baseStats: BaseStats
    abilities: [Ability]
}

type PlayerStats {
    wins: Int
    losses: Int
    level: Int
    experience: Int
    expToNextLevel: Int
}

type DamageDealtEntry {
    playerId: ID!
    damage: Int!
}

type TurnActionEntry {
    playerId: ID
    playerHasTurn: Boolean
    turn: Int
    turnActionLog: String
}

type MatchHistoryEntry {
    battleId: String
    winnerId: String
    loserId: String
    opponentUsername: String
    timestamp: String
    usedCrittersNames: [String]
    opponentCrittersNames: [String]
    turnCount: Int
    duration: Int
    damageDealt: Int
    damageReceived: Int
    turnActionHistory: [TurnActionEntry]
}

type Player {
    id: ID
    username: String
    password: String
    stats: PlayerStats
    roster: [Critter]
    matchHistory: [MatchHistoryEntry]
}

type User {
    id: ID!
    username: String!
}

type LoginResponse {
    user: User!
    token: String!
}

type Query {
    getPlayer(id: ID!): Player
    getMatchHistoryEntry(playerId: String!, battleId: String!): MatchHistoryEntry
}

type Mutation {
    register(username: String!, password: String!): LoginResponse
    login(username: String!, password: String!): LoginResponse
}